#include <iostream>
#include <sstream>
#include <locale.h>
#include <io.h>
#include <fcntl.h>
#include "sudoku.h"
#include "SIplusplus/graph_search.hpp"

int main()
{
    _setmode(_fileno(stdout), _O_U16TEXT);

    const char* boards[] = {
    "010020300004005060070000008006900070000100002030048000500006040000800106008000000", //1
    "000000000010234050006000100070405080050000060030802040005000300040617020000000000", //2
    "000000000010234050002000100030506070050000020070809040007000400090615030000000000", //3
    "000000000010234050002000100050603020040000070030501080008000400070158090000000000", //4
    "000000000010234050006000100070405080050000060030809040007000300040618070000000000", //5
    "000000000010234050002000100060507020070000060050108040003000600080741030000000000", //6
    "000000000010234050006000200020701040050000080060409010003000500040176030000000000", //7
    "000000000010234050006000100020507080050000040060408090005000200040861030000000000", //8
    "000000000010234050002000300030607010050000080080401070004000800020315040000000000", //9
    "000000000010234050006000100040502010070000020030108060007000400020695070000000000", //10
    "000000000010234050002000300060507040040000010050801030006000400070125060000000000", //11
    "000000000080294050002000400060703020040000080050609030005000300030862090000000000", //12
    "000000000010234050002000100060507040020000080050806030004000800080613020000000000", //13
    "000000000010234050003000600060501020020000040070408090001000400050396010000000000", //14
    "000000000010734050008000100070208090050000060030405080005000300090681070000000000", //15
    "000000000090234050007000600070408090050000060030902040005000300040615070000000000", //16
    "000000000010234050003000600070502010080000020050407060008000500020613080000000000", //17
    "000000000010234050005000600060703010020000040030501080001000200040657030000000000", //18
    "000000000010234050002000100050306040020000070030805090004000700070159030000000000", //19
    "000000000010234050006000700050803060020000070030509020004000300070956040000000000", //20
    "000000000010234050002000100050601030040000070070803060007000600030162040000000000", //21
    "000000000010234050002000600070102060040000020050408090009000500020963010000000000", //22
    "000000000010234050002000400060703020040000080050609030006000500030862040000000000", //23
    "000000000010234050006000700050402070080000040020901060003000200060375010000000000", //24
    "000000000010234050006000100070408090050000060020309040005000200040615030000000000", //25
    "000000000080234070006000400070405080050000060030802040005000300040617050000000000", //26
    "000000000010234050006000100070108040020000010050902060003000200080645030000000000", //27
    "000000000010234050006000100070408090050000060030902040005000300040615070000000000", //28
    "000000000010234050006000100070403090050000060030908040005000300040619020000000000", //29
    "000000000010234050006000100070805040050000060030402070007000300040619020000000000", //30
    "000000000080312040007000900040607010090000070020504030004000200030789050000000000", //31
    "000000000010234050006000400070102060040000010050408020001000300030596070000000000", //32
    "000000000010234050006000200040601070050000080030805060004000100060129030000000000", //33
    "000000000010234050005000600060405030020000070050106080007000200030687010000000000", //34
    "000000000010234050006000100040708060050000070030405080004000200060921030000000000", //35
    "000000000010234090006000100040509010070000020090108060007000400020695070000000000", //36
    "000000000010974050006000100070408090050000060020305040007000500040612030000000000", //37
    "000000000010234050006000100020708040090000060030402090005000300040615020000000000", //38
    "000000000010234050003000600060501020020000040070408090001000400050376010000000000", //39
    "000000000010234050003000600060501020020000040070408090001000400050763010000000000", //40
    };

    for(int i=0; i<5; i++)
    {
        std::wcout<<"\n\n"<<"BOARD:\n";
        Sudoku sud = Sudoku(3, boards[i]);
        std::wcout<<"String: "<<boards[i]<<"\n";
        std::wcout<<"Hash  : "<<sud.hash_code()<<"\n\n";
        std::wcout<<sud.to_string();

        std::wcout<<"\n\n"<<"SOLUTION:\n";


        auto searcher = informative_searcher(sud, &Sudoku::compare, 10);
        for(size_t i = 0; i<searcher.get_number_of_solutions(); i++)
        {
            const Sudoku* solution = dynamic_cast<const Sudoku*>(searcher.get_solution(0));
            std::wcout<<solution->to_string();
        }
        std::wcout<<searcher.get_stats();
        std::wcout<<"\n\n"<<"==============================================================================================================\n";
    }

    return 0;
}


